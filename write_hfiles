#!/usr/bin/env python3
#============================================================
#    write_hfiles
#    Copyright (C) 2022  Thomas Lavergne
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#============================================================

import sys
import os
from glob import glob
from datetime import datetime

# Import python modules holding colormaps
try:
    # https://matplotlib.org/stable/tutorials/colors/colormaps.html
    from matplotlib import cm
    from matplotlib import pylab
    has_mlib = True
except ImportError:
    has_mlib = False

try:
    # https://matplotlib.org/cmocean
    import cmocean
    has_cmocean = True
except ImportError:
    has_cmocean = False

try:
    # https://www.fabiocrameri.ch/colourmaps
    # https://pypi.org/project/cmcrameri
    import cmcrameri
    has_cmcrameri = True
except ImportError:
    has_cmcrameri = False

try:
    #  https://cmasher.readthedocs.io/index.html
    import cmasher as cmr
    from cmasher import cm as cmrcm
    has_cmasher = True
except ImportError:
    has_cmasher = False

# We could probaby do without numpy, but it is convenient
import numpy as np

def write_one_hfile(cmap, name, odir):
    ''' Write a colormap into a .h file to be included in the ncview source code. '''
    x = np.arange(0,256) / 255.
    f = 255 * cmap(x)
    fname = 'colormaps_' + name + '.h'
    fname = os.path.join(odir,fname)
    if not os.path.exists(odir):
        os.makedirs(odir)
        print("Make directory {}".format(odir,))

    g = f[:,:3].flatten().astype('int')
    G = ','.join(['{}'.format(gi) for gi in g])

    print("Write {}".format(fname,))
    with open(fname,'w') as _ :
        _.write('// Generated by write_hfiles from package ncmaps - {}\n'.format(datetime.utcnow().isoformat()))
        _.write('\n')
        _.write('static int cmap_{}[] = {{\n'.format(name))
        _.write(G + "\n")
        _.write("};\n")


def write_mlib_cmaps(odir, ):
    ''' Write the colormaps from matplotlib. '''
    # Perceptually Uniform Sequential colormaps
    cmaps = ['viridis', 'inferno', 'magma', 'plasma', 'cividis']
    # Add some more colormaps (diverging and cyclic)
    cmaps.extend(['PiYG', 'PRGn', 'RdBu', 'coolwarm', 'bwr', 'twilight', 'twilight_shifted'])

    for cmap in cmaps:
        cmo = pylab.get_cmap(cmap)
        write_one_hfile(cmo, cmap, odir)

    return cmaps

def write_cmocean_cmaps(odir,):
    ''' Write the colormaps from cmocean. '''
    cmaps = cmocean.cm.cmapnames
    for cmap in cmaps:
        cmo = cmocean.cm.cmap_d[cmap]
        write_one_hfile(cmo, cmap, odir)

    return cmaps

def write_cmcrameri_cmaps(odir,):
    ''' Write the colormaps from cmcrameri. '''
    try:
        # old interface (at least before 1.4)
        cmap_dict = cmcrameri.cm.crameri_cmap
    except AttributeError:
        cmap_dict = cmcrameri.cm.cmaps

    cmaps = [cma for cma in cmap_dict.keys() if not cma.endswith('_r') and not cma.endswith('S')]
    for cmap in cmaps:
        cmo = cmap_dict[cmap]
        write_one_hfile(cmo, cmap, odir)

    return cmaps


def write_cmasher_cmaps(odir,):
    ''' Write the colomaps from cmasher. '''
    all_cmaps = []
    for cmtype in ('sequential', 'diverging', 'cyclic'):
        cmaps = [ t for t in cmrcm.cmap_cd[cmtype].keys() if not t.endswith('_r')]
        for cmap in cmaps:
            cmo = cmrcm.cmap_cd[cmtype][cmap]
            write_one_hfile(cmo, cmap, odir)
        all_cmaps.extend(cmaps,)

    return all_cmaps

if __name__ == '__main__':
    import argparse
    from argparse import RawDescriptionHelpFormatter

    # Get commandline parameters
    p = argparse.ArgumentParser("write_hfiles", formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                description='Prepare scientific colormaps as .h files so that they can be compiled into ncview.')
    p.add_argument('--dir', help='Directory where to write the colormaps.', required=True)
    args = p.parse_args()

    # Use the full path to the output directory
    args.dir = os.path.realpath(args.dir)

    if not has_mlib and not has_cmocean and not has_cmcrameri:
        sys.exit("Found no colormap to write.")

    # write all the .ncmaps files
    all_cmaps = []
    if has_mlib:
        all_cmaps.extend(write_mlib_cmaps(args.dir,))
    else:
        print("Skip colormaps from matplotlib (module not found).")

    if has_cmocean:
        all_cmaps.extend(write_cmocean_cmaps(args.dir,))
    else:
        print("Skip colormaps from cmocean (module not found).")

    if has_cmcrameri:
        all_cmaps.extend(write_cmcrameri_cmaps(args.dir,))
    else:
        print("Skip colormaps from cmcrameri (module not found).")

    # In ncview (Ncview 2.1.8 David W. Pierce  8 March 2017)
    #   a bug is triggered if the number of colormaps available
    #   to ncview through NCVIEWBASE is larger than 79.
    #   (see https://github.com/TomLav/ncmaps/issues/5#issuecomment-832060948)
    #
    # We can thus not support the cmasher colormaps at present. The code
    #   to handler cmasher is kept but de-activated. 
    #
    #if has_cmasher:
    #    all_cmaps.extend(write_cmasher_cmaps(args.dir,))
    #else:
    #    print("Skip colormaps from cmasher (module not found).")

    # Last step is to generate file colormaps_ncmaps.h, to be placed in ncview-ncmaps src/

    # First load which ncmaps are available as .h files
    patt = os.path.join(args.dir,'*.h')
    list_ncmap_files = glob(patt)
    if len(patt) == 0:
        sys.exit("Internal error: cannot find the .h files we just wrote.")
    ncmaps_in_dir = []
    for ncmap_file in list_ncmap_files:
        ncf = os.path.basename(ncmap_file)
        ncmaps_in_dir.append(ncf.replace('.h','').replace('colormaps_',''))

    # This sort() will make the colormaps to be listed alphabetically
    #   in the .ncviewrc file (and thus ncview).
    ncmaps_in_dir.sort(key=str.lower)

    fname = os.path.join(args.dir,'colormaps_ncmaps.h')
    with open(fname, 'w') as _:
        # write header
        _.write('// Colormaps provided by ncmaps - {}\n'.format(datetime.utcnow().isoformat()))
        _.write('\n')

        # write include statements
        for cmap in ncmaps_in_dir:
            #  #include "colormaps/colormaps_batlow.h"
            _.write('#include "colormaps/colormaps_{}.h"\n'.format(cmap))
        _.write('\n')

        # write the INIT_NCMAPS_CMAPS statement
        _.write('#define INIT_NCMAPS_CMAPS \\\n')
        for cmap in ncmaps_in_dir:
            last_slash = '\\'
            if cmap == ncmaps_in_dir[-1]:
                last_slash = ''
            _.write('init_cmap_from_data( "{n:}",  cmap_{n:}  ); {s:}\n'.format(n=cmap, s=last_slash))

    sys.exit('Success, the .h files are in {}'.format(args.dir,))
